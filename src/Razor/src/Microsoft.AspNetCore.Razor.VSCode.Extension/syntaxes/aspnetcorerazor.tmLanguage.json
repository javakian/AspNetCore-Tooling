{
  "name": "ASP.NET Razor",
  "scopeName": "text.aspnetcorerazor",
  "patterns": [
    {
      "include": "#explicit-razor-expression"
    },
    {
      "include": "#escaped-transition"
    },
    {
      "include": "#implicit-expression"
    },
    {
      "include": "text.html.basic"
    }
  ],
  "repository": {
    "escaped-transition": {
      "name": "constant.character.escape.razor.transition",
      "match": "@@"
    },
    "transition": {
      "match": "@",
      "name": "keyword.control.cshtml.transition"
    },
    "explicit-razor-expression": {
      "name": "meta.expression.explicit.cshtml",
      "begin": "(@)\\(",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.cshtml"
        },
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "source.cs#expression"
        }
      ],
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "keyword.control.cshtml"
        }
      }
    },
    "implicit-expression": {
      "name": "meta.expression.implicit.cshtml",
      "begin": "(@)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#await-prefix"
        },
        {
          "include": "#implicit-expression-body"
        }
      ],
      "end": "(?=[\\s<])"
    },
    "await-prefix": {
      "name": "keyword.other.await.cs",
      "match": "(await)\\s+"
    },
    "implicit-expression-body": {
      "patterns": [
        {
          "include": "#implicit-expression-invocation-start"
        },
        {
          "include": "#implicit-expression-accessor-start"
        }
      ],
      "end": "(?=[\\s<])"
    },
    "implicit-expression-invocation-start": {
      "begin": "([_[:alpha:]][_[:alnum:]]*)(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.cs"
        }
      },
      "patterns": [
        {
          "include": "#implicit-expression-continuation"
        }
      ],
      "end": "(?=[\\s<])"
    },
    "implicit-expression-accessor-start": {
      "begin": "([_[:alpha:]][_[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "variable.other.object.cs"
        }
      },
      "patterns": [
        {
          "include": "#implicit-expression-continuation"
        }
      ],
      "end": "(?=[\\s<])"
    },
    "implicit-expression-continuation": {
      "patterns": [
        {
          "include": "#balanced-parenthesis-csharp"
        },
        {
          "include": "#balanced-brackets-csharp"
        },
        {
          "include": "#implicit-expression-invocation"
        },
        {
          "include": "#implicit-expression-accessor"
        },
        {
          "include": "#implicit-expression-extension"
        }
      ],
      "end": "(?=[\\s<])"
    },
    "implicit-expression-accessor": {
      "match": "(?<=\\.)[_[:alpha:]][_[:alnum:]]*",
      "name": "variable.other.object.property.cs"
    },
    "implicit-expression-invocation": {
      "match": "(?<=\\.)[_[:alpha:]][_[:alnum:]]*(?=\\()",
      "name": "entity.name.function.cs"
    },
    "implicit-expression-operator": {
      "patterns": [
        {
          "include": "#implicit-expression-dot-operator"
        },
        {
          "include": "#implicit-expression-null-conditional-operator"
        },
        {
          "include": "#implicit-expression-null-forgiveness-operator"
        }
      ]
    },
    "implicit-expression-dot-operator": {
      "match": "(\\.)(?=[_[:alpha:]][_[:alnum:]]*)",
      "captures": {
        "1": {
          "name": "punctuation.accessor.cs"
        }
      }
    },
    "implicit-expression-null-conditional-operator": {
      "match": "(\\?)(?=[.\\[])",
      "captures": {
        "1": {
          "name": "keyword.operator.null-conditional.cs"
        }
      }
    },
    "implicit-expression-null-forgiveness-operator": {
      "match": "(\\!)(?=(?:\\.[_[:alpha:]][_[:alnum:]]*)|\\?|[\\[\\(])",
      "captures": {
        "1": {
          "name": "keyword.operator.logical.cs"
        }
      }
    },
    "balanced-parenthesis-csharp": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.open.cs"
        }
      },
      "name": "razor.test.balanced.parenthesis",
      "patterns": [
        {
          "include": "source.cs"
        }
      ],
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.close.cs"
        }
      }
    },
    "balanced-brackets-csharp": {
      "begin": "(\\[)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.squarebracket.open.cs"
        }
      },
      "name": "razor.test.balanced.brackets",
      "patterns": [
        {
          "include": "source.cs"
        }
      ],
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "name": "punctuation.squarebracket.close.cs"
        }
      }
    },
    "balanced-curlybraces-csharp": {
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.curlybrace.open.cs"
        }
      },
      "name": "razor.test.balanced.curlybraces",
      "patterns": [
        {
          "include": "source.cs"
        }
      ],
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "punctuation.curlybrace.close.cs"
        }
      }
    }
  }
}
